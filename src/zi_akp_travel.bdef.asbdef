managed;//" implementation in class zbp_i_akp_travel unique;

define behavior for ZI_AKP_TRAVEL alias Travel
implementation in class zbp_i_akp_travel
persistent table zakp_dt_travel
lock master
//authorization master ( instance )
etag master LocalLastChangedAt
{
  create;
  update;
  delete;
  association _Booking { create; }

  field ( numbering : managed, readonly ) TravelUuid;
  field ( readonly  ) TravelID, TotalPrice, TravelStatus;
  field ( readonly  ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy, LocalLastChangedAt;
  field ( mandatory ) AgencyID, CustomerID;

  mapping for zakp_dt_travel
  {
    TravelUuid = travel_uuid;
    TravelId = travel_id;
    AgencyId = agency_id;
    CustomerId = customer_id;
    BeginDate = begin_date;
    EndDate = end_date;
    BookingFee = booking_fee;
    TotalPrice = total_price;
    CurrencyCode = currency_code;
    Description = description;
    TravelStatus = overall_status;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LastChangedAt = last_changed_at;
    LocalLastChangedAt = local_last_changed_at;
  }
}


define behavior for ZI_AKP_BOOKING alias Booking
implementation in class zbp_i_akp_booking
persistent table zakp_dt_book
lock dependent by _Travel
//authorization dependent by <association>
etag master LocalLastChangedAt
{

  association _Travel;

  update;
  delete;


  field ( numbering : managed, readonly ) BookingUuid;
  field ( readonly ) TravelUuid;

  mapping for zakp_dt_book
  {
    BookingUuid = booking_uuid;
    TravelUuid = travel_uuid;
    BookingId = booking_id;
    BookingDate = booking_date;
    CustomerId = customer_id;
    CarrierId = carrier_id;
    ConnectionId = connection_id;
    FlightDate = flight_date;
    FlightPrice = flight_price;
    CurrencyCode = currency_code;
    CreatedBy = created_by;
    CreatedAt = created_at;
    LastChangedBy = last_changed_by;
    LocalLastChangedAt = local_last_changed_at;

  }
}
//we want to make use of the so-called optimistic locking.
//This is done by defining the ETag master on both entities.
//It's a recommended approach to have a local ETag for each entity.